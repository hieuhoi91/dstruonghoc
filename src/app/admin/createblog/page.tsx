"use client";
import { Badge } from "@/components/ui/badge";
import { GoogleGenAI } from "@google/genai";
import { useRef, useState } from "react";
import { saveBlog } from "./actions";
import GeminiPromptInput from "./components/GeminiPromptInput";
import MarkdownEditor from "./components/MarkdownEditor";

// CSS styles for TipTap editor
const editorStyles = `
  .ProseMirror {
    outline: none;
    min-height: 400px;
    padding: 1.5rem;
    line-height: 1.7;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    font-size: 16px;
    color: #374151;
    background-color: #ffffff;
  }
  
  .ProseMirror p {
    margin: 0.75rem 0;
    color: #374151;
  }
  
  .ProseMirror h1 {
    font-size: 2.25rem;
    font-weight: 800;
    margin: 1.5rem 0 1rem 0;
    color: #111827;
    line-height: 1.2;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .ProseMirror h2 {
    font-size: 1.875rem;
    font-weight: 700;
    margin: 1.25rem 0 0.75rem 0;
    color: #1f2937;
    line-height: 1.3;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .ProseMirror h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin: 1rem 0 0.5rem 0;
    color: #374151;
    line-height: 1.4;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }
  
  .ProseMirror ul, .ProseMirror ol {
    margin: 0.75rem 0;
    padding-left: 1.75rem;
    color: #374151;
  }
  
  .ProseMirror li {
    margin: 0.375rem 0;
    line-height: 1.6;
  }
  
  .ProseMirror ul li {
    list-style-type: disc;
  }
  
  .ProseMirror ol li {
    list-style-type: decimal;
  }
  
  .ProseMirror strong {
    font-weight: 600;
    color: #111827;
  }
  
  .ProseMirror em {
    font-style: italic;
    color: #4b5563;
  }
  
  .ProseMirror u {
    text-decoration: underline;
    text-decoration-color: #3b82f6;
    text-decoration-thickness: 2px;
  }
  
  .ProseMirror table {
    border-collapse: collapse;
    margin: 1.5rem 0;
    width: 100%;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    overflow: hidden;
  }
  
  .ProseMirror th, .ProseMirror td {
    border: 1px solid #e5e7eb;
    padding: 0.75rem;
    text-align: left;
    font-size: 14px;
  }
  
  .ProseMirror th {
    background-color: #f8fafc;
    font-weight: 600;
    color: #374151;
  }
  
  .ProseMirror img {
    max-width: 100%;
    height: auto;
    margin: 1.5rem 0;
    border-radius: 8px;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  .ProseMirror blockquote {
    border-left: 4px solid #3b82f6;
    margin: 1.5rem 0;
    padding: 1rem 1.5rem;
    background-color: #f8fafc;
    border-radius: 0 8px 8px 0;
    font-style: italic;
    color: #4b5563;
    font-size: 1.1em;
  }
  
  .ProseMirror code {
    background-color: #f1f5f9;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
    color: #dc2626;
    border: 1px solid #e2e8f0;
  }
  
  .ProseMirror pre {
    background-color: #1e293b;
    padding: 1.5rem;
    border-radius: 8px;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid #334155;
  }
  
  .ProseMirror pre code {
    background-color: transparent;
    padding: 0;
    color: #e2e8f0;
    border: none;
    font-size: 0.875rem;
  }
  
  /* Focus styles */
  .ProseMirror:focus {
    outline: none;
  }
  
  /* Placeholder styles */
  .ProseMirror p.is-editor-empty:first-child::before {
    color: #9ca3af;
    content: attr(data-placeholder);
    float: left;
    height: 0;
    pointer-events: none;
  }
`;
const CreateBlog = () => {
  const [prompt, setPrompt] = useState("");
  const [aiResponse, setAiResponse] = useState("");
  const [loading, setLoading] = useState(false);
  const [editorContent, setEditorContent] = useState("Vi·∫øt n·ªôi dung...");
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);
  const [editorKey, setEditorKey] = useState(0); // Key ƒë·ªÉ force re-render editor
  const [saving, setSaving] = useState(false);
  const [saveError, setSaveError] = useState("");
  const editorRef = useRef<any>(null);
  const [schoolName, setSchoolName] = useState("");
  const [schoolAddress, setSchoolAddress] = useState("");
  const [schoolYear, setSchoolYear] = useState("");
  const [schoolType, setSchoolType] = useState("");
  const [schoolAdmissionCriteria, setSchoolAdmissionCriteria] = useState("");
  const [schoolTuition, setSchoolTuition] = useState("");
  const [schoolDescribe, setSchoolDescribe] = useState("");
  const [schoolMajorPopular, setSchoolMajorPopular] = useState<string[]>([]);
  const [editingMajorIndex, setEditingMajorIndex] = useState<number | null>(
    null
  );
  const [editingMajorValue, setEditingMajorValue] = useState("");
  const [newMajor, setNewMajor] = useState("");
  const [schoolLogo, setSchoolLogo] = useState("");

  // T·∫°o slug t·ª´ schoolName
  const generateSlug = (name: string): string => {
    return name
      .toLowerCase()
      .normalize("NFD")
      .replace(/ƒë/g, "d")
      .replace(/[\u0300-\u036f]/g, "") // Lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát
      .replace(/[^a-z0-9\s-]/g, "") // Ch·ªâ gi·ªØ ch·ªØ c√°i, s·ªë, kho·∫£ng tr·∫Øng v√† d·∫•u g·∫°ch ngang
      .replace(/\s+/g, "-") // Thay kho·∫£ng tr·∫Øng b·∫±ng d·∫•u g·∫°ch ngang
      .replace(/-+/g, "-") // Lo·∫°i b·ªè d·∫•u g·∫°ch ngang li√™n ti·∫øp
      .trim();
  };

  const schoolSlug = generateSlug(schoolName);

  // G·ªçi Gemini API
  const handleGeminiPrompt = async () => {
    if (!prompt.trim()) return;
    setLoading(true);
    setAiResponse("");
    setShowSuccessMessage(false);
    try {
      const apiKey = "AIzaSyDqiDa39WF1L96Z7fPCms1Z4j2c-lKyjWk";
      const ai = new GoogleGenAI({
        apiKey: apiKey,
      });
      const config = {
        thinkingConfig: {
          thinkingBudget: -1,
        },
        responseMimeType: "text/plain",
      };
      const model = "gemini-2.5-flash";
      const response = await ai.models.generateContent({
        model,
        config,
        contents: [
          {
            role: "user",
            parts: [
              {
                text: `"H√£y cung c·∫•p th√¥ng tin chi ti·∫øt v√† c·∫≠p nh·∫≠t m·ªõi nh·∫•t v·ªÅ tr∆∞·ªùng ${prompt} theo c·∫•u tr√∫c JSON sau:

                        {
                          "school_name": "T√™n tr∆∞·ªùng",
                          "school_address": "ƒê·ªãa ch·ªâ tr∆∞·ªùng ch·ªâ l·∫•y t·ªânh ho·∫∑c th√†nh ph·ªë, ghi t·∫Øt ko c·∫ßn th√™m ch·ªØ th√†nh ph·ªë, ghi r√µ r√†ng t√™n t·ªânh v√† th√†nh ph·ªë (v√≠ d·ª•: H·ªì Ch√≠ Minh, H√† N·ªôi, ƒê√† N·∫µng, H·∫£i Ph√≤ng, ...) ",
                          "school_year": "NƒÉm th√†nh l·∫≠p",
                          "school_type": "Lo·∫°i h√¨nh tr∆∞·ªùng (c√¥ng l·∫≠p/t∆∞ th·ª•c/qu·ªëc t·∫ø)",
                          "school_describe": "1 ho·∫∑c 2 c√¢u m√¥ t·∫£ ng·∫Øn v·ªÅ tr∆∞·ªùng",
                          "school_admission_criteria": "Ch·ªâ ti√™u tuy·ªÉn sinh trong kho·∫£ng bao nhi√™u (v√≠ d·ª•: 1000 - 1500), c·∫ßn ph·∫£i l·∫•y th√¥ng tin ch√≠nh x√°c",
                          "school_tuition": "H·ªçc ph√≠ trong kho·∫£ng bao nhi√™u (v√≠ d·ª•: 10 tri·ªáu - 15 tri·ªáu/nƒÉm ho·∫∑c k√¨), c·∫ßn ph·∫£i l·∫•y th√¥ng tin ch√≠nh x√°c",
                          "school_major_popular": ["Ng√†nh 1", "Ng√†nh 2", "Ng√†nh 3", ...],
                          "details": "Gi·ªõi thi·ªáu chung:
                            T√™n ƒë·∫ßy ƒë·ªß, t√™n vi·∫øt t·∫Øt
                            V·ªã tr√≠, c∆° s·ªü
                            NƒÉm th√†nh l·∫≠p
                            Lo·∫°i h√¨nh tr∆∞·ªùng (c√¥ng l·∫≠p/t∆∞ th·ª•c/qu·ªëc t·∫ø)
                            S·ª© m·ªánh, ƒë·ªãnh h∆∞·ªõng ƒë√†o t·∫°o ho·∫∑c tri·∫øt l√Ω gi√°o d·ª•c
                            Tin t·ª©c tuy·ªÉn sinh m·ªõi nh·∫•t:
                            Ti√™u ch√≠ tuy·ªÉn sinh nƒÉm nay
                            Ch·ªâ ti√™u d·ª± ki·∫øn
                            Ph∆∞∆°ng th·ª©c x√©t tuy·ªÉn (thi tuy·ªÉn, h·ªçc b·∫°, ∆∞u ti√™n, v.v.)
                            C√°c t·ªï h·ª£p m√¥n x√©t tuy·ªÉn
                            Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o:
                            C√°c h·ªá ƒë√†o t·∫°o: ƒë·∫°i tr√†, ch·∫•t l∆∞·ª£ng cao, li√™n k·∫øt qu·ªëc t·∫ø, vƒÉn b·∫±ng 2, li√™n th√¥ng
                            C√°c ch∆∞∆°ng tr√¨nh trao ƒë·ªïi sinh vi√™n (n·∫øu c√≥)
                            Ng√†nh h·ªçc v√† lƒ©nh v·ª±c ƒë√†o t·∫°o:
                            C√°c ng√†nh ƒë√†o t·∫°o ch√≠nh
                            Ng√†nh h·ªçc th·∫ø m·∫°nh, ƒë·∫∑c tr∆∞ng ho·∫∑c "hot" hi·ªán nay
                            C√°c lƒ©nh v·ª±c c√≥ li√™n k·∫øt qu·ªëc t·∫ø, c∆° h·ªôi ngh·ªÅ nghi·ªáp cao
                            H·ªçc ph√≠ & h·ªçc b·ªïng:
                            M·ª©c h·ªçc ph√≠ c·∫≠p nh·∫≠t m·ªõi nh·∫•t (so s√°nh gi·ªØa c√°c h·ªá n·∫øu c√≥)
                            Ch√≠nh s√°ch h·ªçc b·ªïng (theo ƒëi·ªÉm, theo ho√†n c·∫£nh, t√†i tr·ª£ doanh nghi·ªáp...)
                            
                            Ph·∫ßn n√†y ko c·∫ßn ph√¢n t√≠ch nh·ªè ra ch·ªâ c·∫ßn vi·∫øt chung th√†nh text ƒë·ªÉ ki·ªÉu markdown, tr√¨nh b√†y r√µ r√†ng, chi ti·∫øt, ƒë·∫ßy ƒë·ªß, c√≥ c√°c ƒë·∫ßu m·ª•c"
                        
                        }

                        
                          üëâ N·∫øu c√≥ th√¥ng tin m·ªõi nh·∫•t 2025 t·ª´ website tr∆∞·ªùng ho·∫∑c b√°o ch√≠, h√£y ∆∞u ti√™n c·∫≠p nh·∫≠t n·ªôi d·ª•ng m·ªõi nh·∫•t v√†o n·ªôi dung tr√™n.
                            Ch·ªâ c·∫ßn cho t√¥i k·∫øt qu·∫£                        
                        "`,
              },
            ],
          },
        ],
      });

      // L·∫•y markdown thu·∫ßn t·ª´ AI, nh∆∞ng gi·ªù s·∫Ω l·∫•y field 'details' trong JSON tr·∫£ v·ªÅ
      let aiText = response.text ?? "";
      let details = "";

      // Lo·∫°i b·ªè markdown code block n·∫øu c√≥
      let jsonString = aiText.trim();
      if (jsonString.startsWith("```")) {
        // X·ª≠ l√Ω c·∫£ tr∆∞·ªùng h·ª£p ```json ho·∫∑c ch·ªâ ```
        const lines = jsonString.split("\n");
        // N·∫øu d√≤ng ƒë·∫ßu l√† ```json ho·∫∑c ```, b·ªè d√≤ng ƒë·∫ßu v√† d√≤ng cu·ªëi
        if (lines[0].startsWith("```")) {
          lines.shift(); // b·ªè d√≤ng ƒë·∫ßu
        }
        if (lines[lines.length - 1].startsWith("```")) {
          lines.pop(); // b·ªè d√≤ng cu·ªëi
        }
        jsonString = lines.join("\n");
      }

      try {
        const parsed = JSON.parse(jsonString);
        details = parsed.details || aiText;
        setSchoolName(parsed.school_name || "");
        setSchoolAddress(parsed.school_address || "");
        setSchoolYear(parsed.school_year || "");
        setSchoolType(parsed.school_type || "");
        setSchoolDescribe(parsed.school_describe || "");
        setSchoolAdmissionCriteria(parsed.school_admission_criteria || "");
        setSchoolTuition(parsed.school_tuition || "");
        // N·∫øu l√† array th√¨ set lu√¥n, n·∫øu l√† string th√¨ t√°ch theo d·∫•u ph·∫©y
        if (Array.isArray(parsed.school_major_popular)) {
          setSchoolMajorPopular(
            parsed.school_major_popular.filter((s: string) => Boolean(s))
          );
        } else if (typeof parsed.school_major_popular === "string") {
          setSchoolMajorPopular(
            parsed.school_major_popular
              .split(",")
              .map((s: string) => s.trim())
              .filter((s: string) => Boolean(s))
          );
        } else {
          setSchoolMajorPopular([]);
        }
      } catch (e) {
        console.log(e);
        details = aiText;
      }
      setEditorContent(details);
      setEditorKey((prev) => prev + 1);
      setAiResponse(details);
      setShowSuccessMessage(true);
      setTimeout(() => {
        setEditorKey((prev) => prev + 1);
      }, 100);
      setTimeout(() => {
        setShowSuccessMessage(false);
      }, 3000);
    } catch (err) {
      setAiResponse("ƒê√£ x·∫£y ra l·ªói khi g·ªçi Gemini AI.");
    } finally {
      setLoading(false);
    }
  };

  const handleSaveBlog = async () => {
    setSaving(true);
    setSaveError("");
    try {
      // L·∫•y markdown t·ª´ editor
      const markdown = editorRef.current?.getMarkdown() || "";
      await saveBlog({
        logo: schoolLogo,
        slug: schoolSlug,
        school_name: schoolName,
        school_address: schoolAddress,
        school_year: schoolYear,
        school_type: schoolType,
        school_describe: schoolDescribe,
        school_major_popular: schoolMajorPopular,
        school_admission_criteria: schoolAdmissionCriteria,
        school_tuition: schoolTuition,
        details: markdown,
      });
      setShowSuccessMessage(true);
      setTimeout(() => setShowSuccessMessage(false), 3000);
    } catch (err: any) {
      setSaveError(err.message || "ƒê√£ x·∫£y ra l·ªói khi l∆∞u b√†i vi·∫øt.");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div
      style={{
        maxWidth: 1200,
        margin: "40px auto",
        background: "#fff",
        borderRadius: 8,
        boxShadow: "0 2px 16px #eee",
        padding: 32,
      }}
    >
      {/* Gemini AI Prompt Input */}
      <div className="mb-5">
        <GeminiPromptInput
          prompt={prompt}
          setPrompt={setPrompt}
          onSendPrompt={handleGeminiPrompt}
          loading={loading}
          showSuccessMessage={showSuccessMessage}
        />
      </div>
      {/* End Gemini AI Prompt Input */}

      <h2
        style={{
          marginBottom: 24,
          fontWeight: 700,
          fontSize: 28,
          textAlign: "center",
        }}
      >
        Th√™m Tr∆∞·ªùng M·ªõi
      </h2>

      <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block mb-2 font-semibold">T√™n tr∆∞·ªùng:</label>
          <input
            type="text"
            value={schoolName}
            onChange={(e) => setSchoolName(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="T√™n tr∆∞·ªùng"
            disabled={saving}
          />
        </div>

        <div>
          <label className="block mb-2 font-semibold">ƒê·ªãa ch·ªâ:</label>
          <input
            type="text"
            value={schoolAddress}
            onChange={(e) => setSchoolAddress(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="ƒê·ªãa ch·ªâ tr∆∞·ªùng"
            disabled={saving}
          />
        </div>
        <div>
          <label className="block mb-2 font-semibold">NƒÉm th√†nh l·∫≠p:</label>
          <input
            type="text"
            value={schoolYear}
            onChange={(e) => setSchoolYear(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="NƒÉm th√†nh l·∫≠p"
            disabled={saving}
          />
        </div>
        <div>
          <label className="block mb-2 font-semibold">Lo·∫°i h√¨nh tr∆∞·ªùng:</label>
          <input
            type="text"
            value={schoolType}
            onChange={(e) => setSchoolType(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="Lo·∫°i h√¨nh tr∆∞·ªùng"
            disabled={saving}
          />
        </div>
        <div>
          <label className="block mb-2 font-semibold">
            Ch·ªâ ti√™u tuy·ªÉn sinh:
          </label>
          <input
            type="text"
            value={schoolAdmissionCriteria}
            onChange={(e) => setSchoolAdmissionCriteria(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="Ch·ªâ ti√™u tuy·ªÉn sinh"
            disabled={saving}
          />
        </div>
        <div>
          <label className="block mb-2 font-semibold">H·ªçc ph√≠:</label>
          <input
            type="text"
            value={schoolTuition}
            onChange={(e) => setSchoolTuition(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="H·ªçc ph√≠"
            disabled={saving}
          />
        </div>
        <div className="md:col-span-2">
          <label className="block mb-2 font-semibold">M√¥ t·∫£ ng·∫Øn:</label>
          <textarea
            value={schoolDescribe}
            onChange={(e) => setSchoolDescribe(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="M√¥ t·∫£ ng·∫Øn v·ªÅ tr∆∞·ªùng"
            disabled={saving}
            rows={2}
          />
        </div>
        <div className="md:col-span-2">
          <label className="block mb-2 font-semibold">C√°c ng√†nh ch√≠nh:</label>
          <div className="flex flex-wrap gap-2 mb-2">
            {schoolMajorPopular.map((major, idx) => (
              <>
                {editingMajorIndex === idx ? (
                  <input
                    key={"edit-" + idx}
                    type="text"
                    value={editingMajorValue}
                    onChange={(e) => setEditingMajorValue(e.target.value)}
                    onBlur={() => {
                      const arr = [...schoolMajorPopular];
                      arr[idx] = editingMajorValue;
                      setSchoolMajorPopular(arr);
                      setEditingMajorIndex(null);
                    }}
                    onKeyDown={(e) => {
                      if (e.key === "Enter") {
                        const arr = [...schoolMajorPopular];
                        arr[idx] = editingMajorValue;
                        setSchoolMajorPopular(arr);
                        setEditingMajorIndex(null);
                      }
                    }}
                    className="border rounded px-2 py-1"
                    autoFocus
                  />
                ) : (
                  <Badge
                    key={major + idx}
                    className="cursor-pointer rounded-xl group px-4 py-2 text-sm bg"
                    onClick={() => {
                      setEditingMajorIndex(idx);
                      setEditingMajorValue(major);
                    }}
                  >
                    {major}
                    <button
                      type="button"
                      className="ml-1 text-xs text-red-500 group-hover:inline hidden cursor-pointer"
                      onClick={(e) => {
                        e.stopPropagation();
                        setSchoolMajorPopular(
                          schoolMajorPopular.filter((_, i) => i !== idx)
                        );
                      }}
                    >
                      √ó
                    </button>
                  </Badge>
                )}
              </>
            ))}
          </div>
          <div className="flex gap-2">
            <input
              type="text"
              value={newMajor}
              onChange={(e) => setNewMajor(e.target.value)}
              className="border rounded px-2 py-1"
              placeholder="Th√™m ng√†nh m·ªõi"
              onKeyDown={(e) => {
                if (e.key === "Enter" && newMajor.trim()) {
                  setSchoolMajorPopular([
                    ...schoolMajorPopular,
                    newMajor.trim(),
                  ]);
                  setNewMajor("");
                }
              }}
              disabled={saving}
            />
            <button
              type="button"
              className="bg-blue-500 text-white px-3 py-1 rounded"
              onClick={() => {
                if (newMajor.trim()) {
                  setSchoolMajorPopular([
                    ...schoolMajorPopular,
                    newMajor.trim(),
                  ]);
                  setNewMajor("");
                }
              }}
              disabled={saving}
            >
              Th√™m
            </button>
          </div>
        </div>
      </div>

      {/* Preview Section */}
      <div className="mb-6 p-4 bg-gray-50 rounded-lg grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <label className="block mb-2 font-semibold">Logo URL:</label>
          <input
            type="url"
            value={schoolLogo}
            onChange={(e) => setSchoolLogo(e.target.value)}
            className="w-full border rounded px-3 py-2 mb-4"
            placeholder="https://example.com/logo.png"
            disabled={saving}
          />
        </div>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block mb-2 font-semibold text-sm text-gray-600">
              Logo:
            </label>
            {schoolLogo ? (
              <img
                src={schoolLogo}
                alt="Logo tr∆∞·ªùng"
                className="w-16 h-16 object-contain border rounded"
                onError={(e) => {
                  e.currentTarget.style.display = "none";
                }}
              />
            ) : (
              <div className="w-16 h-16 border-2 border-dashed border-gray-300 rounded flex items-center justify-center text-gray-400 text-xs">
                Ch∆∞a c√≥ logo
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Markdown Editor */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-3">N·ªôi dung b√†i vi·∫øt:</h3>
        <MarkdownEditor
          ref={editorRef}
          key={editorKey}
          content={editorContent}
          onContentChange={setEditorContent}
        />
      </div>
      {saveError && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded">
          {saveError}
        </div>
      )}
      {showSuccessMessage && (
        <div className="mb-4 p-3 bg-green-100 text-green-700 rounded">
          L∆∞u b√†i vi·∫øt th√†nh c√¥ng!
        </div>
      )}
      <button
        style={{
          width: "100%",
          background: saving ? "#90caf9" : "#1976d2",
          color: "#fff",
          padding: "14px 0",
          fontSize: 18,
          fontWeight: 600,
          border: "none",
          borderRadius: 4,
          cursor: saving ? "not-allowed" : "pointer",
          transition: "background 0.2s",
          marginTop: 24,
        }}
        onClick={handleSaveBlog}
        disabled={saving}
      >
        {saving ? "ƒêang l∆∞u..." : "L∆∞u b√†i vi·∫øt"}
      </button>
    </div>
  );
};

export default CreateBlog;
